---

- name: Set fact for public IPs listed in la, which we need to enter here statically after they're created
  set_fact: the_servars=[1.1.1.1,2.2.2.2]

  # This task is much sooner in this providr, because we have to pull tags directly from the instances, not an API
  # also adds IP to known_hosts
  # Note: Disabling StrictHostKeyChecking does NOT allow the key to change; it only adds it
  #   when it doesn't exist. However, it could still be nice to only set the flag to disabled
  #   when the above call to the cloud module reports a result of 'changed'.
- name: Attempt SSH as instanceInitialUser - FAILS if user customization already done
  shell: "ssh -o StrictHostKeyChecking=no -i ../ssh/{{ key_name }} {{ instanceInitialUser }}@{{ item.public_ip }} 'exit'"
  with_items: awapne2.tagged_instances
  when: wait == "yes"
  ignore_errors: yes
  register: ssh_attempt




#WIP




- name: Set up a new host instance on EC2
  local_action:
    module: ec2
    region: "{{ region }}"
    zone: "{{ zone }}"
    key_name: "{{ key_name }}"
    instance_type: "{{ instance_type }}"
    image: "{{ image }}"
    group: "{{ group }}"
    wait: "{{ wait }}"
    wait_timeout: 600
    instance_tags:
       "ec2servis": "{{ servis }}"
       "ec2type": "{{ type }}"
       "ec2servis_and_ec2type": "{{ servis }}_{{ type }}"
       "Name": "{{ servis }}_{{ type }}"
    exact_count: "{{ count }}"
    count_tag:
       "ec2servis": "{{ servis }}"
       "ec2type": "{{ type }}"
       "ec2servis_and_ec2type": "{{ servis }}_{{ type }}"
    vpc_subnet_id: "{{ vpc_subnet_id }}"
    assign_public_ip: "{{ assign_public_ip|default('yes') }}"
    user_data: "{{ lookup('template', '../templates/cloud-config.yml.j2') }}"
    volumes:
      - device_name: /dev/sda1
        device_type: gp2
        volume_size: 250
        delete_on_termination: true
  register: awapne2

#
# CAUTION!
# The value used for name= or hostname= in the add_hosts tasks below must either be unique (such as the public
#   IP) or include the providr name to prevent duplicate hostnames between providrs (i.e.: two qasite-webhost3
#   hosts, in different providrs). Some providrs embed their name in the instance's name when creating it and
#   this stays with the value when used as the hostname in add_host tasks, others prepend it to the hostname
#   field in every add_host task.
#

- name: Add instance(s) to group named for this servis
  local_action: add_host hostname={{ item.public_ip }} ansible_ssh_host={{ item.public_ip }} groupname={{ servis }}
                nodeType={{ type }}
                public_ip={{ item.public_ip }}
                public_dns_hostname={{ item.private_dns_name }}
                private_ip={{ item.private_ip }}
                private_dns_hostname={{ item.private_dns_name }}
                providr="awapne2"
                instanceInitialUser={{ instanceInitialUser }}
  with_items: awapne2.tagged_instances
  when: wait == "yes"

- name: Add instance(s) to group named for providr
  add_host: hostname={{ item.public_ip }} ansible_ssh_host={{ item.public_ip }} groupname=awapne2
  with_items: awapne2.tagged_instances
  when: wait == "yes"

- name: Add instance(s) to group representing type of host
  local_action: add_host hostname={{ item.public_ip }} ansible_ssh_host={{ item.public_ip }} groupname={{ type }}
  with_items: awapne2.tagged_instances
  when: wait == "yes"

- name: Add instance(s) to combo servis_type group, such as prod3_dbnode, or prod4_webnode
  local_action: add_host hostname={{ item.public_ip }} ansible_ssh_host={{ item.public_ip }} groupname="{{ servis }}_{{ type }}"
  with_items: awapne2.tagged_instances
  when: wait == "yes"

  #this and surrounding tasks need some attention (at least to their descriptions) based on changes to what
  #   the labeling_group and roles_applied are called and how they function
- name: Add instance(s) to group representing type of host
  local_action: add_host hostname={{ item[0].public_ip }} ansible_ssh_host={{ item[0].public_ip }} groupname={{ item[1] }}
  with_nested:
    - awapne2.tagged_instances
    - roles_applied
  when: wait == "yes"

- name: Add instance(s) to combo servis_type group, such as prod3_dbnode, or prod4_webnode
  local_action: add_host hostname={{ item[0].public_ip }} ansible_ssh_host={{ item[0].public_ip }} groupname="{{ servis }}_{{ item[1] }}"
  with_nested:
    - awapne2.tagged_instances
    - roles_applied
  when: wait == "yes"

- name: Wait for SSH to come up on instances
  local_action: wait_for port=22 host={{ item.public_ip }} timeout=600
  with_items: awapne2.tagged_instances
  when: wait == "yes"

  # also adds IP to known_hosts
  # Note: Disabling StrictHostKeyChecking does NOT allow the key to change; it only adds it
  #   when it doesn't exist. However, it could still be nice to only set the flag to disabled
  #   when the above call to the cloud module reports a result of 'changed'.
- name: Attempt SSH as instanceInitialUser - FAILS if user customization already done
  shell: "ssh -o StrictHostKeyChecking=no -i ../ssh/{{ key_name }} {{ instanceInitialUser }}@{{ item.public_ip }} 'exit'"
  with_items: awapne2.tagged_instances
  when: wait == "yes"
  ignore_errors: yes
  register: ssh_attempt

- name: Add instance(s) still requiring user customization to 'host_users_customized_False' group
  local_action: add_host hostname={{ item.item.public_ip }} groupname="host_users_customized_False"
  with_items: ssh_attempt.results
  when: wait == "yes" and item.rc == 0

  # AFAIK, we never address the host by this name anymore so this isn't strictly necessary. We'll keep it for now
#- name: Re-SSH as initialInstanceUser using private DNS name(s) instead of IP(s), to also add them to known_hosts (skips if first attempt failed)
#  shell: "ssh -o StrictHostKeyChecking=no -i ../ssh/{{ key_name }} {{ instanceInitialUser }}@{{ item.item.private_dns_name }} 'exit'"
#  with_items: ssh_attempt.results
#  when: wait == "yes" and item.rc == 0
#  ignore_errors: yes

#- debug: var=group_names
